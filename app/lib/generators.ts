export type Generator = {
	slug: string;
	name: string;
	title: string;
	description: string;
	emoji: string;
	generate: (options: Record<string, unknown>) => string;
	popular?: boolean;
	settings?: {
		[key: string]: {
			type: "range" | "checkbox" | "number" | "select";
			label?: string;
			min?: number;
			max?: number;
			default: unknown;
			options?: {
				label: string;
				value: string;
			}[];
		};
	};
};

export const generators: Generator[] = [
	{
		slug: "password",
		name: "–ü–∞—Ä–æ–ª—å",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π",
		description:
			"–ú–æ—â–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ—Å—Ç–æ–π–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
		emoji: "üîí",
		popular: true,
		settings: {
			length: {
				type: "range",
				label: "–î–ª–∏–Ω–∞",
				min: 8,
				max: 32,
				default: 12,
			},
			useNumbers: { type: "checkbox", label: "–¶–∏—Ñ—Ä—ã", default: true },
			useSymbols: {
				type: "checkbox",
				label: "–°–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã",
				default: true,
			},
			useUppercase: {
				type: "checkbox",
				label: "–ü—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã",
				default: true,
			},
			useRussian: {
				type: "checkbox",
				label: "–†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã",
				default: true,
			},
			useEnglish: {
				type: "checkbox",
				label: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã",
				default: true,
			},
			noRepeats: {
				type: "checkbox",
				label: "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤",
				default: false,
			},
		},
		generate: ({
			length,
			useNumbers,
			useSymbols,
			useUppercase,
			useRussian,
			useEnglish,
			noRepeats,
		}) => {
			const lower = "abcdefghijklmnopqrstuvwxyz";
			const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
			const russianLower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
			const russianUpper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø";
			const numbers = "0123456789";
			const symbols = "!@#$%^&*()-_=+[]{};:,.<>?";

			let chars = "";

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
			if (useEnglish) {
				chars += lower;
				if (useUppercase) chars += upper;
			}

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
			if (useRussian) {
				chars += russianLower;
				if (useUppercase) chars += russianUpper;
			}

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
			if (useNumbers) chars += numbers;
			if (useSymbols) chars += symbols;

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
			if (chars.length === 0) {
				return "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏!";
			}

			let result = "";

			if (noRepeats) {
				// –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
				const charsArray = chars.split("");
				if (
					charsArray.length <
					(typeof length === "number" ? length : 8)
				) {
					return "–û—à–∏–±–∫–∞: –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!";
				}
				// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
				while (
					result.length < (typeof length === "number" ? length : 8)
				) {
					const randomIndex = Math.floor(
						Math.random() * charsArray.length
					);
					result += charsArray.splice(randomIndex, 1);
				}
			} else {
				// –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
				for (
					let i = 0;
					i < (typeof length === "number" ? length : 8);
					i++
				) {
					result += chars[Math.floor(Math.random() * chars.length)];
				}
			}

			return result;
		},
	},
	{
		slug: "number",
		name: "–ß–∏—Å–ª–æ",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª",
		description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
		emoji: "üî¢",
		popular: true,
		settings: {
			min: {
				type: "number",
				label: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
				default: 1,
			},
			max: {
				type: "number",
				label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
				default: 100,
			},
		},
		generate: ({ min, max }) => {
			if (
				(typeof max === "number" ? max : 1) <
				(typeof min === "number" ? min : 1)
			) {
				return "–û—à–∏–±–∫–∞: –º–∞–∫—Å–∏–º—É–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞!";
			}

			return (
				Math.floor(
					Math.random() *
						((typeof max === "number" ? max : 1) -
							(typeof min === "number" ? min : 1) +
							1)
				) + (typeof min === "number" ? min : 1)
			).toString();
		},
	},
	{
		slug: "color",
		name: "–¶–≤–µ—Ç",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤",
		description:
			"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (HEX, RGB, HSL).",
		emoji: "üé®",
		popular: true,
		settings: {
			format: {
				type: "select",
				label: "–§–æ—Ä–º–∞—Ç",
				options: [
					{ value: "hex", label: "HEX" },
					{ value: "rgb", label: "RGB" },
					{ value: "hsl", label: "HSL" },
				],
				default: "hex",
			},
			alpha: {
				type: "checkbox",
				label: "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (alpha)",
				default: false,
			},
			preview: {
				type: "checkbox",
				label: "–ü—Ä–µ–≤—å—é",
				default: true,
			},
		},
		generate: ({ format, alpha }) => {
			const r = Math.floor(Math.random() * 256);
			const g = Math.floor(Math.random() * 256);
			const b = Math.floor(Math.random() * 256);
			const a = Math.round((Math.random() * 0.5 + 0.5) * 100) / 100; // Alpha –æ—Ç 0.5 –¥–æ 1

			switch (format) {
				case "hex":
					const hex = `#${r.toString(16).padStart(2, "0")}${g
						.toString(16)
						.padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
					return alpha
						? `${hex}${Math.floor(a * 255)
								.toString(16)
								.padStart(2, "0")}`
						: hex;
				case "rgb":
					return alpha
						? `rgba(${r}, ${g}, ${b}, ${a})`
						: `rgb(${r}, ${g}, ${b})`;
				case "hsl":
					const rNorm = r / 255;
					const gNorm = g / 255;
					const bNorm = b / 255;
					const max = Math.max(rNorm, gNorm, bNorm);
					const min = Math.min(rNorm, gNorm, bNorm);
					let h = 0,
						s,
						l = (max + min) / 2;

					if (max !== min) {
						const d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						switch (max) {
							case rNorm:
								h =
									(gNorm - bNorm) / d +
									(gNorm < bNorm ? 6 : 0);
								break;
							case gNorm:
								h = (bNorm - rNorm) / d + 2;
								break;
							case bNorm:
								h = (rNorm - gNorm) / d + 4;
								break;
						}
						h /= 6;
					} else {
						s = 0;
					}

					h = Math.round(h * 360);
					s = Math.round(s * 100);
					l = Math.round(l * 100);

					return alpha
						? `hsla(${h}, ${s}%, ${l}%, ${a})`
						: `hsl(${h}, ${s}%, ${l}%)`;
				default:
					return `#${r.toString(16)}${g.toString(16)}${b.toString(
						16
					)}`;
			}
		},
	},
	{
		slug: "uuid",
		name: "UUID",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UUID",
		description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (UUID v4).",
		emoji: "üÜî",
		popular: true,
		settings: {},
		generate: () => {
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
				/[xy]/g,
				function (c) {
					const r = (Math.random() * 16) | 0;
					const v = c === "x" ? r : (r & 0x3) | 0x8;
					return v.toString(16);
				}
			);
		},
	},
];
