export type Generator = {
	slug: string;
	name: string;
	title: string;
	description: string;
	emoji: string;
	generate: (options: Record<string, unknown>) => string;
	popular?: boolean;
	settings?: {
		[key: string]: {
			type: "range" | "checkbox" | "number" | "select";
			label?: string;
			min?: number;
			max?: number;
			default: unknown;
			options?: {
				label: string;
				value: string;
			}[];
		};
	};
};

export const generators: Generator[] = [
	{
		slug: "nickname",
		name: "–ù–∏–∫–Ω–µ–π–º",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤",
		description:
			"–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–ª–ª–∏–æ–Ω–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
		emoji: "üë§",
		popular: true,
		settings: {
			style: {
				type: "select",
				label: "–°—Ç–∏–ª—å",
				options: [
					{ value: "cyber", label: "–ö–∏–±–µ—Ä–ø–∞–Ω–∫" },
					{ value: "fantasy", label: "–§—ç–Ω—Ç–µ–∑–∏" },
					{ value: "abstract", label: "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π" },
					{ value: "russian", label: "–†—É—Å—Å–∫–∏–π" },
				],
				default: "cyber",
			},
			complexity: {
				type: "range",
				label: "–°–ª–æ–∂–Ω–æ—Å—Ç—å",
				min: 1,
				max: 5,
				default: 3,
			},
			mutations: {
				type: "checkbox",
				label: "–°–ª—É—á–∞–π–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏",
				default: true,
			},
			addNumbers: {
				type: "checkbox",
				label: "–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã",
				default: true,
			},
		},
		generate: ({
			style = "cyber",
			complexity = 3,
			mutations = true,
			addNumbers = true,
		}: {
			style?: string;
			complexity?: number;
			mutations?: boolean;
			addNumbers?: boolean;
		}) => {
			type MorphemeData = {
				prefixes: string[];
				cores: string[];
				suffixes: string[];
				connectors: string[];
			};

			const MORPHEMES: Record<string, MorphemeData> = {
				cyber: {
					prefixes: [
						"Neuro",
						"Cyber",
						"Quantum",
						"Nano",
						"Hyper",
						"X",
						"Zero",
						"Dark",
					],
					cores: [
						"void",
						"pulse",
						"bit",
						"code",
						"flux",
						"synth",
						"grid",
						"node",
					],
					suffixes: ["_x", "404", ".exe", "++", "~", "01"],
					connectors: ["-", "_", "", "."],
				},
				fantasy: {
					prefixes: [
						"Shadow",
						"Dragon",
						"Blood",
						"Iron",
						"Storm",
						"Night",
						"Fire",
					],
					cores: [
						"blade",
						"mage",
						"born",
						"heart",
						"fury",
						"wing",
						"horn",
					],
					suffixes: ["bane", "reaper", "seeker", "walker", "hunter"],
					connectors: ["", "-", "'"],
				},
				abstract: {
					prefixes: ["Zyx", "Qwert", "Asdf", "Jkl", "Vbnm", "Uiop"],
					cores: ["ol", "iu", "ert", "tyu", "op", "asd"],
					suffixes: ["!@", "#$", "%^", "&*", "()"],
					connectors: ["", "", ".", "~"],
				},
				russian: {
					prefixes: [
						"–¢–µ–º–Ω—ã–π",
						"–Ø—Ä—ã–π",
						"–ö–æ—Å–æ–π",
						"–ë—ã—Å—Ç—Ä—ã–π",
						"–°—Ç–∞–ª—å–Ω–æ–π",
						"–ö—Ä–∞—Å–Ω—ã–π",
					],
					cores: [
						"–≤–æ–ª–∫",
						"–º–µ–¥–≤–µ–¥—å",
						"–≤–æ—Ä–æ–Ω",
						"—Ç–∏–≥—Ä",
						"–¥—Ä–∞–∫–æ–Ω",
						"–≤–æ–∏–Ω",
					],
					suffixes: ["123", "X", "Z", "2023", "88"],
					connectors: ["_", "", "-"],
				},
			};

			const SPECIAL_CHARS = ["x", "z", "v", "*", "~", "_"];
			const NUMBER_SUFFIXES = [
				"123",
				"88",
				"2023",
				"42",
				"777",
				"69",
				"228",
				"112",
				"666",
				"777",
			];

			const getRandom = <T>(arr: T[]): T =>
				arr[Math.floor(Math.random() * arr.length)];
			const randomInt = (min: number, max: number): number =>
				Math.floor(Math.random() * (max - min + 1)) + min;
			const shouldMutate = (): boolean =>
				mutations && Math.random() > 0.6;

			const data = MORPHEMES[style] || MORPHEMES.cyber;
			const compLevel = Math.min(5, Math.max(1, complexity));

			// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤—ã
			const generateBase = (): string => {
				const parts: string[] = [];

				// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70%
				if (Math.random() > 0.3) {
					parts.push(getRandom(data.prefixes));
				}

				// –î–æ–±–∞–≤–ª—è–µ–º 1-3 –æ—Å–Ω–æ–≤—ã
				const coreCount = randomInt(1, Math.max(1, compLevel - 1));
				for (let i = 0; i < coreCount; i++) {
					parts.push(getRandom(data.cores));
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50%
				if (Math.random() > 0.5) {
					parts.push(getRandom(data.suffixes));
				}

				// –°–æ–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏
				return parts.join(getRandom(data.connectors));
			};

			let nickname = generateBase();

			// –ú—É—Ç–∞—Ü–∏–∏
			if (shouldMutate()) {
				const mutationType = randomInt(1, 4);
				const pos = randomInt(1, nickname.length - 2);

				switch (mutationType) {
					case 1:
						nickname =
							nickname.slice(0, pos) +
							getRandom(SPECIAL_CHARS) +
							nickname.slice(pos);
						break;
					case 2:
						nickname = nickname
							.split("")
							.map((c, idx) =>
								idx % 2 === 0
									? c.toUpperCase()
									: c.toLowerCase()
							)
							.join("");
						break;
					case 3:
						nickname =
							nickname.slice(0, pos) +
							nickname.slice(pos, pos + 2) +
							nickname.slice(pos);
						break;
					case 4:
						nickname =
							nickname.slice(0, pos) +
							nickname
								.slice(pos, pos + 2)
								.split("")
								.reverse()
								.join("") +
							nickname.slice(pos + 2);
						break;
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã
			if (addNumbers && Math.random() > 0.3) {
				nickname += getRandom(NUMBER_SUFFIXES);
			}

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
			const maxLength = 4 + compLevel * 3;
			return nickname.slice(0, maxLength);
		},
	},
	{
		slug: "password",
		name: "–ü–∞—Ä–æ–ª—å",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π",
		description:
			"–ú–æ—â–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ—Å—Ç–æ–π–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
		emoji: "üîí",
		popular: true,
		settings: {
			length: {
				type: "range",
				label: "–î–ª–∏–Ω–∞",
				min: 8,
				max: 32,
				default: 12,
			},
			useNumbers: { type: "checkbox", label: "–¶–∏—Ñ—Ä—ã", default: true },
			useSymbols: {
				type: "checkbox",
				label: "–°–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã",
				default: true,
			},
			useUppercase: {
				type: "checkbox",
				label: "–ü—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã",
				default: true,
			},
			useRussian: {
				type: "checkbox",
				label: "–†—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã",
				default: true,
			},
			useEnglish: {
				type: "checkbox",
				label: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã",
				default: true,
			},
			noRepeats: {
				type: "checkbox",
				label: "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤",
				default: false,
			},
		},
		generate: ({
			length,
			useNumbers,
			useSymbols,
			useUppercase,
			useRussian,
			useEnglish,
			noRepeats,
		}) => {
			const lower = "abcdefghijklmnopqrstuvwxyz";
			const upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
			const russianLower = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
			const russianUpper = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø";
			const numbers = "0123456789";
			const symbols = "!@#$%^&*()-_=+[]{};:,.<>?";

			let chars = "";

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
			if (useEnglish) {
				chars += lower;
				if (useUppercase) chars += upper;
			}

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
			if (useRussian) {
				chars += russianLower;
				if (useUppercase) chars += russianUpper;
			}

			// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
			if (useNumbers) chars += numbers;
			if (useSymbols) chars += symbols;

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
			if (chars.length === 0) {
				return "–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏!";
			}

			let result = "";

			if (noRepeats) {
				// –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
				const charsArray = chars.split("");
				if (
					charsArray.length <
					(typeof length === "number" ? length : 8)
				) {
					return "–û—à–∏–±–∫–∞: –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!";
				}
				// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
				while (
					result.length < (typeof length === "number" ? length : 8)
				) {
					const randomIndex = Math.floor(
						Math.random() * charsArray.length
					);
					result += charsArray.splice(randomIndex, 1);
				}
			} else {
				// –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
				for (
					let i = 0;
					i < (typeof length === "number" ? length : 8);
					i++
				) {
					result += chars[Math.floor(Math.random() * chars.length)];
				}
			}

			return result;
		},
	},
	{
		slug: "number",
		name: "–ß–∏—Å–ª–æ",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª",
		description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
		emoji: "üî¢",
		popular: true,
		settings: {
			min: {
				type: "number",
				label: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
				default: 1,
			},
			max: {
				type: "number",
				label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ",
				default: 100,
			},
		},
		generate: ({ min, max }) => {
			if (
				(typeof max === "number" ? max : 1) <
				(typeof min === "number" ? min : 1)
			) {
				return "–û—à–∏–±–∫–∞: –º–∞–∫—Å–∏–º—É–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞!";
			}

			return (
				Math.floor(
					Math.random() *
						((typeof max === "number" ? max : 1) -
							(typeof min === "number" ? min : 1) +
							1)
				) + (typeof min === "number" ? min : 1)
			).toString();
		},
	},
	{
		slug: "color",
		name: "–¶–≤–µ—Ç",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤",
		description:
			"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (HEX, RGB, HSL).",
		emoji: "üé®",
		popular: true,
		settings: {
			format: {
				type: "select",
				label: "–§–æ—Ä–º–∞—Ç",
				options: [
					{ value: "hex", label: "HEX" },
					{ value: "rgb", label: "RGB" },
					{ value: "hsl", label: "HSL" },
				],
				default: "hex",
			},
			alpha: {
				type: "checkbox",
				label: "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (alpha)",
				default: false,
			},
			preview: {
				type: "checkbox",
				label: "–ü—Ä–µ–≤—å—é",
				default: true,
			},
		},
		generate: ({ format, alpha }) => {
			const r = Math.floor(Math.random() * 256);
			const g = Math.floor(Math.random() * 256);
			const b = Math.floor(Math.random() * 256);
			const a = Math.round((Math.random() * 0.5 + 0.5) * 100) / 100; // Alpha –æ—Ç 0.5 –¥–æ 1

			switch (format) {
				case "hex":
					const hex = `#${r.toString(16).padStart(2, "0")}${g
						.toString(16)
						.padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
					return alpha
						? `${hex}${Math.floor(a * 255)
								.toString(16)
								.padStart(2, "0")}`
						: hex;
				case "rgb":
					return alpha
						? `rgba(${r}, ${g}, ${b}, ${a})`
						: `rgb(${r}, ${g}, ${b})`;
				case "hsl":
					const rNorm = r / 255;
					const gNorm = g / 255;
					const bNorm = b / 255;
					const max = Math.max(rNorm, gNorm, bNorm);
					const min = Math.min(rNorm, gNorm, bNorm);
					let h = 0,
						s,
						l = (max + min) / 2;

					if (max !== min) {
						const d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						switch (max) {
							case rNorm:
								h =
									(gNorm - bNorm) / d +
									(gNorm < bNorm ? 6 : 0);
								break;
							case gNorm:
								h = (bNorm - rNorm) / d + 2;
								break;
							case bNorm:
								h = (rNorm - gNorm) / d + 4;
								break;
						}
						h /= 6;
					} else {
						s = 0;
					}

					h = Math.round(h * 360);
					s = Math.round(s * 100);
					l = Math.round(l * 100);

					return alpha
						? `hsla(${h}, ${s}%, ${l}%, ${a})`
						: `hsl(${h}, ${s}%, ${l}%)`;
				default:
					return `#${r.toString(16)}${g.toString(16)}${b.toString(
						16
					)}`;
			}
		},
	},
	{
		slug: "uuid",
		name: "UUID",
		title: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä UUID",
		description: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (UUID v4).",
		emoji: "üÜî",
		popular: true,
		settings: {},
		generate: () => {
			return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
				/[xy]/g,
				function (c) {
					const r = (Math.random() * 16) | 0;
					const v = c === "x" ? r : (r & 0x3) | 0x8;
					return v.toString(16);
				}
			);
		},
	},
];
